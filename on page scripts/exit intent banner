  (() => {
    let exitIntentShown = false;
    const exitIntentShowKey = 'exitIntentShown';

    const attr = 'data-ei-element';
    const dialog = document.querySelector(`[${attr}="dialog"]`);

    // Check if dialog exists and browser supports showModal
    if (!dialog || typeof dialog.showModal !== 'function') return;

    // Check if exit intent has been shown in this session
    if (sessionStorage.getItem(exitIntentShowKey)) return;

    // Variables to store event listener references
    let mouseLeaveHandler, mouseEnterHandler, scrollHandler;
    let timeOnSiteTimeout, mouseLeaveTimeout, scrollTimeout;

    // Variables for dialog event listeners and elements
    let ctaClick, closeButtonClick, dialogBackdropClick, dialogClose;
    let cta, close;

    // Function to handle exit intent trigger
    function handleExitIntent(reason) {
      logIntent(`Reason: ${reason}`);
      if (exitIntentShown) return;
      exitIntentShown = true; // Set immediately to prevent duplicates

      handleDialog();
      sessionStorage.setItem(exitIntentShowKey, 'true');

      // Remove event listeners related to exit intent triggers
      removeExitIntentEventListeners();
    }

    function handleDialog() {
      dialog.showModal();
      logExitIntentView();

      // Get dialog elements
      close = dialog.querySelector(`[${attr}="close"]`);
      cta = dialog.querySelector(`[${attr}="cta"]`);

      // Event handler for CTA button click
      ctaClick = function () {
        logExitIntentClick();
        removeDialogEventListeners();
      };
      cta.addEventListener('click', ctaClick);

      // Event handler for close button click
      closeButtonClick = function () {
        closeDialog();
        removeDialogEventListeners();
      };
      close.addEventListener('click', closeButtonClick);

      // Event handler for dialog backdrop click
      dialogBackdropClick = function (event) {
        if (event.target !== dialog) return;
        closeDialog();
        removeDialogEventListeners();
      };
      dialog.addEventListener('click', dialogBackdropClick);

      // Event handler for dialog close event
      dialogClose = function () {
        logExitIntentClose();
        removeDialogEventListeners();
      };
      dialog.addEventListener('close', dialogClose);
    }

    function closeDialog() {
      if (dialog.open) dialog.close();
      logExitIntentClose();
    }

    function removeDialogEventListeners() {
      if (ctaClick && cta) cta.removeEventListener('click', ctaClick);
      if (closeButtonClick && close) close.removeEventListener('click', closeButtonClick);
      if (dialogBackdropClick) dialog.removeEventListener('click', dialogBackdropClick);
      if (dialogClose) dialog.removeEventListener('close', dialogClose);
    }
    
    // Function to run when exit intext is viewed
    function logExitIntentView() {
      gtag('event', 'Exit_intent_show');
    }
    
    // Function to run when exit intext is closed
    function logExitIntentClose() {
      gtag('event', 'Exit_intent_close');
    }
    
    // Function to run when exit intext button is clicked
    function logExitIntentClick() {
      gtag('event', 'Exit_intent_cta_click');
    }

    // Function to remove all relevant event listeners
    function removeExitIntentEventListeners() {
      if (mouseLeaveHandler) document.removeEventListener('mouseleave', mouseLeaveHandler);
      if (mouseEnterHandler) document.removeEventListener('mouseenter', mouseEnterHandler);
      if (scrollHandler) window.removeEventListener('scroll', scrollHandler);
      if (timeOnSiteTimeout) clearTimeout(timeOnSiteTimeout);
      if (mouseLeaveTimeout) clearTimeout(mouseLeaveTimeout);
      if (scrollTimeout) clearTimeout(scrollTimeout);
    }

    // Desktop triggers
    function initDesktopTriggers() {
      let mouseLeftWindow = false;

      mouseLeaveHandler = function () {
        if (!exitIntentShown) {
          mouseLeftWindow = true;

          // Set a timeout to trigger exit intent after a short delay
          mouseLeaveTimeout = setTimeout(function () {
            if (mouseLeftWindow && !exitIntentShown) handleExitIntent('mouseLeave');
          }, 500); // Adjust delay as needed
        }
      };

      mouseEnterHandler = function () {
        // Mouse re-entered the window, cancel the timeout
        mouseLeftWindow = false;
        if (mouseLeaveTimeout) {
          clearTimeout(mouseLeaveTimeout);
          mouseLeaveTimeout = null;
        }
      };

      document.addEventListener('mouseleave', mouseLeaveHandler);
      document.addEventListener('mouseenter', mouseEnterHandler);
    }

    // Mobile triggers
    function initMobileTriggers() {
      let lastScrollTop = 0;
      const scrollDelay = 500; // Adjust as needed
      const scrollThresholdPercent = 25; // Percentage of total scrollable height
      const maxScrollDistance = 2000; // Maximum scroll distance in pixels

      function getScrollThreshold() {
        const totalHeight = Math.max(
          document.body.scrollHeight,
          document.documentElement.scrollHeight
        );
        const percentThreshold = (scrollThresholdPercent / 100) * totalHeight;
        return Math.min(percentThreshold, maxScrollDistance);
      }

      // Debounce function to improve performance
      function debounce(func, wait) {
        let timeout;
        return function (...args) {
          const context = this;
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(context, args), wait);
        };
      }

      scrollHandler = debounce(function () {
        const st = window.pageYOffset || document.documentElement.scrollTop;
        const scrollThreshold = getScrollThreshold();

        if (st < lastScrollTop && st > scrollThreshold && !exitIntentShown) {
          handleExitIntent('scroll');
        }
        lastScrollTop = st <= 0 ? 0 : st; // For Mobile or negative scrolling
      }, scrollDelay);

      window.addEventListener('scroll', scrollHandler);
    }

    // Time on site trigger (both desktop and mobile)
    function initTimeOnSiteTrigger() {
      const timeOnSite = 30 * 1000; // 30 seconds
      timeOnSiteTimeout = setTimeout(function () {
        if (!exitIntentShown) handleExitIntent('timeOnSite');
      }, timeOnSite);
    }

    // Initialize triggers based on device type
    function initExitIntent() {
      // Feature detection for touch devices
      function isTouchDevice() {
        return (
          'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0
        );
      }

      // Check if exit intent has been shown in this session
      if (sessionStorage.getItem(exitIntentShowKey)) {
        exitIntentShown = true;
        return;
      }

      // Initialize appropriate triggers
      if (isTouchDevice()) {
        initMobileTriggers();
      } else {
        initDesktopTriggers();
      }

      // Initialize time-based trigger for all devices
      initTimeOnSiteTrigger();
    }

    // Initialize the exit intent script
    initExitIntent();

    function logIntent(reason) {
      if (!window.location.host.includes('test.landc.co.uk')) return;
      console.log(`Intent triggered, reason: ${reason}`);
    }
  })();