(() => {
  // Configurable Parameters
  const EXIT_INTENT_CONFIG = {
      scrollThresholdPercent: 25,
      maxScrollDistance: 2000,
      scrollDelay: 500,
      timeOnSite: 30 * 1000
  };

  let exitIntentShown = false;
  const exitIntentCookieKey = 'exitIntentDismissed';

  const attr = 'data-ei-element';
  const dialog = document.querySelector(`[${attr}="dialog"]`);

  if (!dialog || typeof dialog.showModal !== 'function') return;

  function hasRecentDismissal() {
      const dismissedAt = getCookie(exitIntentCookieKey);
      if (!dismissedAt) return false;

      const twentyFourHoursAgo = Date.now() - (24 * 60 * 60 * 1000);
      return parseInt(dismissedAt) > twentyFourHoursAgo;
  }

  function setCookie(name, value, days) {
      const date = new Date();
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      const expires = `expires=${date.toUTCString()}`;
      document.cookie = `${name}=${value};${expires};path=/;SameSite=Strict`;
  }

  function getCookie(name) {
      const cookieName = `${name}=`;
      const decodedCookie = decodeURIComponent(document.cookie);
      const cookieArray = decodedCookie.split(';');
      
      for (let cookie of cookieArray) {
          while (cookie.charAt(0) === ' ') {
              cookie = cookie.substring(1);
          }
          if (cookie.indexOf(cookieName) === 0) {
              return cookie.substring(cookieName.length, cookie.length);
          }
      }
      return "";
  }

  let mouseLeaveHandler, mouseEnterHandler, scrollHandler;
  let timeOnSiteTimeout, mouseLeaveTimeout, scrollTimeout;

  let ctaClick, closeButtonClick, dialogBackdropClick, dialogClose;
  let cta, close;

  function handleExitIntent(reason) {
    logIntent(`Reason: ${reason}`);
    if (exitIntentShown || hasRecentDismissal()) return;
    exitIntentShown = true;

    handleDialog();
    removeExitIntentEventListeners();
  }

  function initDesktopTriggers() {
    let mouseLeftWindow = false;

    mouseLeaveHandler = function () {
      if (!exitIntentShown) {
        mouseLeftWindow = true;

        mouseLeaveTimeout = setTimeout(function () {
          if (mouseLeftWindow && !exitIntentShown) handleExitIntent('mouseLeave');
        }, 500);
      }
    };

    mouseEnterHandler = function () {
      mouseLeftWindow = false;
      if (mouseLeaveTimeout) {
        clearTimeout(mouseLeaveTimeout);
        mouseLeaveTimeout = null;
      }
    };

    document.addEventListener('mouseleave', mouseLeaveHandler);
    document.addEventListener('mouseenter', mouseEnterHandler);
  }

  function initMobileTriggers() {
    let lastScrollTop = 0;

    function getScrollThreshold() {
      const totalHeight = Math.max(
        document.body.scrollHeight,
        document.documentElement.scrollHeight
      );
      const percentThreshold = (EXIT_INTENT_CONFIG.scrollThresholdPercent / 100) * totalHeight;
      return Math.min(percentThreshold, EXIT_INTENT_CONFIG.maxScrollDistance);
    }

    function debounce(func, wait) {
      let timeout;
      return function (...args) {
        const context = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), wait);
      };
    }

    scrollHandler = debounce(function () {
      const st = window.pageYOffset || document.documentElement.scrollTop;
      const scrollThreshold = getScrollThreshold();

      if (st < lastScrollTop && st > scrollThreshold && !exitIntentShown) {
        handleExitIntent('scroll');
      }
      lastScrollTop = st <= 0 ? 0 : st;
    }, EXIT_INTENT_CONFIG.scrollDelay);

    window.addEventListener('scroll', scrollHandler);
  }

  function initTimeOnSiteTrigger() {
    timeOnSiteTimeout = setTimeout(function () {
      if (!exitIntentShown) handleExitIntent('timeOnSite');
    }, EXIT_INTENT_CONFIG.timeOnSite);
  }

  function removeExitIntentEventListeners() {
    if (mouseLeaveHandler) document.removeEventListener('mouseleave', mouseLeaveHandler);
    if (mouseEnterHandler) document.removeEventListener('mouseenter', mouseEnterHandler);
    if (scrollHandler) window.removeEventListener('scroll', scrollHandler);
    if (timeOnSiteTimeout) clearTimeout(timeOnSiteTimeout);
    if (mouseLeaveTimeout) clearTimeout(mouseLeaveTimeout);
    if (scrollTimeout) clearTimeout(scrollTimeout);
  }

  function initExitIntent() {
    function isTouchDevice() {
      return (
        'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0
      );
    }

    if (hasRecentDismissal()) {
      exitIntentShown = true;
      return;
    }

    if (isTouchDevice()) {
      initMobileTriggers();
    } else {
      initDesktopTriggers();
    }

    initTimeOnSiteTrigger();
  }

  function handleDialog() {
    dialog.showModal();
    logExitIntentView();

    close = dialog.querySelector(`[${attr}="close"]`);
    cta = dialog.querySelector(`[${attr}="cta"]`);

    ctaClick = function () {
      logExitIntentClick();
      removeDialogEventListeners();
    };
    cta.addEventListener('click', ctaClick);

    closeButtonClick = function () {
      closeDialog();
      removeDialogEventListeners();
    };
    close.addEventListener('click', closeButtonClick);

    dialogBackdropClick = function (event) {
      if (event.target !== dialog) return;
      closeDialog();
      removeDialogEventListeners();
    };
    dialog.addEventListener('click', dialogBackdropClick);

    dialogClose = function () {
      closeDialog();
      logExitIntentClose();
      removeDialogEventListeners();
    };
    dialog.addEventListener('close', dialogClose);
  }

  function closeDialog() {
    if (dialog.open) dialog.close();
    setCookie(exitIntentCookieKey, Date.now(), 1);
    logExitIntentClose();
  }

  function removeDialogEventListeners() {
    if (ctaClick && cta) cta.removeEventListener('click', ctaClick);
    if (closeButtonClick && close) close.removeEventListener('click', closeButtonClick);
    if (dialogBackdropClick) dialog.removeEventListener('click', dialogBackdropClick);
    if (dialogClose) dialog.removeEventListener('close', dialogClose);
  }
  
  function logExitIntentView() {
    gtag('event', 'Exit_intent_show');
  }
  
  function logExitIntentClose() {
    gtag('event', 'Exit_intent_close');
  }
  
  function logExitIntentClick() {
    gtag('event', 'Exit_intent_cta_click');
  }

  function logIntent(reason) {
    if (!window.location.host.includes('test.landc.co.uk')) return;
    console.log(`Intent triggered, reason: ${reason}`);
  }

  initExitIntent();
})();