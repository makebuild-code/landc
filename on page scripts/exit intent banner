(() => {
  let exitIntentShown = false;
  const exitIntentCookieKey = 'exitIntentDismissed';

  const attr = 'data-ei-element';
  const dialog = document.querySelector(`[${attr}="dialog"]`);

  // Check if dialog exists and browser supports showModal
  if (!dialog || typeof dialog.showModal !== 'function') return;

  // Check if exit intent has been dismissed in the last 24 hours
  function hasRecentDismissal() {
      const dismissedAt = getCookie(exitIntentCookieKey);
      if (!dismissedAt) return false;

      const twentyFourHoursAgo = Date.now() - (24 * 60 * 60 * 1000);
      return parseInt(dismissedAt) > twentyFourHoursAgo;
  }

  // Utility function to set a cookie
  function setCookie(name, value, days) {
      const date = new Date();
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      const expires = `expires=${date.toUTCString()}`;
      document.cookie = `${name}=${value};${expires};path=/;SameSite=Strict`;
  }

  // Utility function to get a cookie
  function getCookie(name) {
      const cookieName = `${name}=`;
      const decodedCookie = decodeURIComponent(document.cookie);
      const cookieArray = decodedCookie.split(';');
      
      for (let cookie of cookieArray) {
          while (cookie.charAt(0) === ' ') {
              cookie = cookie.substring(1);
          }
          if (cookie.indexOf(cookieName) === 0) {
              return cookie.substring(cookieName.length, cookie.length);
          }
      }
      return "";
  }

  // Variables to store event listener references
  let mouseLeaveHandler, mouseEnterHandler, scrollHandler;
  let timeOnSiteTimeout, mouseLeaveTimeout, scrollTimeout;

  // Variables for dialog event listeners and elements
  let ctaClick, closeButtonClick, dialogBackdropClick, dialogClose;
  let cta, close;

  // Function to handle exit intent trigger
  function handleExitIntent(reason) {
    logIntent(`Reason: ${reason}`);
    if (exitIntentShown || hasRecentDismissal()) return;
    exitIntentShown = true; // Set immediately to prevent duplicates

    handleDialog();
    removeExitIntentEventListeners();
  }

  function handleDialog() {
    dialog.showModal();
    logExitIntentView();

    // Get dialog elements
    close = dialog.querySelector(`[${attr}="close"]`);
    cta = dialog.querySelector(`[${attr}="cta"]`);

    // Event handler for CTA button click
    ctaClick = function () {
      logExitIntentClick();
      removeDialogEventListeners();
    };
    cta.addEventListener('click', ctaClick);

    // Event handler for close button click
    closeButtonClick = function () {
      closeDialog();
      removeDialogEventListeners();
    };
    close.addEventListener('click', closeButtonClick);

    // Event handler for dialog backdrop click
    dialogBackdropClick = function (event) {
      if (event.target !== dialog) return;
      closeDialog();
      removeDialogEventListeners();
    };
    dialog.addEventListener('click', dialogBackdropClick);

    // Event handler for dialog close event
    dialogClose = function () {
      logExitIntentClose();
      removeDialogEventListeners();
    };
    dialog.addEventListener('close', dialogClose);
  }

  function closeDialog() {
    if (dialog.open) dialog.close();
    
    // Set cookie to prevent re-showing for 24 hours
    setCookie(exitIntentCookieKey, Date.now(), 1);
    
    logExitIntentClose();
  }

  function removeDialogEventListeners() {
    if (ctaClick && cta) cta.removeEventListener('click', ctaClick);
    if (closeButtonClick && close) close.removeEventListener('click', closeButtonClick);
    if (dialogBackdropClick) dialog.removeEventListener('click', dialogBackdropClick);
    if (dialogClose) dialog.removeEventListener('close', dialogClose);
  }
  
  // Existing logging functions remain the same
  function logExitIntentView() {
    gtag('event', 'Exit_intent_show');
  }
  
  function logExitIntentClose() {
    gtag('event', 'Exit_intent_close');
  }
  
  function logExitIntentClick() {
    gtag('event', 'Exit_intent_cta_click');
  }

  // Remaining functions (removeExitIntentEventListeners, initDesktopTriggers, 
  // initMobileTriggers, initTimeOnSiteTrigger, initExitIntent, logIntent) 
  // remain exactly the same as in the original script

  // Initialize the exit intent script
  initExitIntent();
})();